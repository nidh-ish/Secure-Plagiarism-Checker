    # message = bitarray(bin(random.getrandbits(128))[2:].zfill(128))
    message = bitarray("01010100011101110110111100100000010011110110111001100101001000000100111001101001011011100110010100100000010101000111011101101111")
    print("Message: ", ba2hex(message))
    l1 = bitarray(bin(random.getrandbits(128))[2:].zfill(128))
    l2 = bitarray(bin(random.getrandbits(128))[2:].zfill(128))
    m = l1 ^ l2 ^ message

    # key = bitarray(bin(random.getrandbits(128))[2:].zfill(128))
    key = bitarray("01010100011010000110000101110100011100110010000001101101011110010010000001001011011101010110111001100111001000000100011001110101")
    print("Key: ", ba2hex(key))
    k1 = bitarray(bin(random.getrandbits(128))[2:].zfill(128))
    k2 = bitarray(bin(random.getrandbits(128))[2:].zfill(128))
    mk = l1 ^ l2 ^ message


    # Messenger between Server0 and Server1
    M01 = Messenger()
    # Messenger between Server0 and Server2
    M02 = Messenger()
    # Messenger between Server1 and Server2
    M12 = Messenger()

    # Generate random value for Server0 and Server1
    r01 = bitarray(bin(random.getrandbits(128))[2:].zfill(128))

    # Generate random value for Server0 and Server2
    r02 = bitarray(bin(random.getrandbits(128))[2:].zfill(128))

    # Generate random value for Server1 and Server2
    r12 = bitarray(bin(random.getrandbits(128))[2:].zfill(128))

    # Generate random value for Server0, Server1, and Server2
    r_common = bitarray(bin(random.getrandbits(128))[2:].zfill(128))

    # Instantiate the servers
    S0 = Server0(r01, r02, r_common, M02, M01)
    S1 = Server1(r01, r12, r_common, M01, M12)
    S2 = Server2(r02, r12, r_common, M12, M02)

    aes = AES()
    o0 = Share()
    o1 = Share()
    o2 = Share()

    p0 = multiprocessing.Process(target=aes.circuit, args=([k1, k2], [l1, l2], S0, o0))
    p1 = multiprocessing.Process(target=aes.circuit, args=([k1, mk], [l1, m], S1, o1))
    p2 = multiprocessing.Process(target=aes.circuit, args=([k2, mk], [l2, m], S2, o2))

    p0.start()
    p1.start()
    p2.start()

    p0.join()
    p1.join()
    p2.join()

    o0 = o0.get()
    o2 = o2.get()
    print(ba2hex(o0[0] ^ o0[1] ^ o2[1]))